import { Injectable } from '@angular/core';
import { initializeApp } from 'firebase/app';
import {
  getAuth,
  signInWithEmailAndPassword,
  createUserWithEmailAndPassword,
  signOut,
  onAuthStateChanged,
  User as FirebaseUser,
  GoogleAuthProvider,
  signInWithPopup,
} from 'firebase/auth';
import { getFirestore, doc, setDoc, collection, addDoc } from 'firebase/firestore';
import { environment } from '../../environments/environment';

@Injectable({
  providedIn: 'root',
})
export class FirebaseService {
  private app;
  private auth;
  private firestore;

  constructor() {
    try {
      console.log('üî• Inicializando Firebase...');
      console.log('Configura√ß√£o do Firebase:', environment.firebaseConfig);

      this.app = initializeApp(environment.firebaseConfig);
      this.auth = getAuth(this.app);
      this.firestore = getFirestore(this.app);

      console.log('‚úÖ Firebase inicializado com sucesso!');
      console.log('Auth:', this.auth);
      console.log('Firestore:', this.firestore);
    } catch (error) {
      console.group('‚ùå ERRO CR√çTICO na inicializa√ß√£o do Firebase:');
      console.error('Erro:', error);
      console.error('Configura√ß√£o:', environment.firebaseConfig);
      console.groupEnd();
      throw error;
    }
  }

  // Login com email e senha
  async signInWithEmail(email: string, password: string): Promise<FirebaseUser | null> {
    try {
      const userCredential = await signInWithEmailAndPassword(this.auth, email, password);
      return userCredential.user;
    } catch (error: any) {
      console.error('Erro no login Firebase:', error);
      throw new Error(this.getFirebaseErrorMessage(error.code));
    }
  }

  // Registro com email e senha
  async createUserWithEmail(email: string, password: string): Promise<FirebaseUser | null> {
    try {
      console.log('üî• Iniciando cria√ß√£o de usu√°rio no Firebase Auth...');
      const userCredential = await createUserWithEmailAndPassword(this.auth, email, password);
      console.log('‚úÖ Usu√°rio criado com sucesso no Firebase Auth:', userCredential.user.uid);
      return userCredential.user;
    } catch (error: any) {
      console.group('‚ùå ERRO no Firebase Auth - createUserWithEmail:');
      console.error('C√≥digo do erro:', error.code);
      console.error('Mensagem:', error.message);
      console.error('Email usado:', email);
      console.error('Erro completo:', error);
      console.groupEnd();

      // Relan√ßar erro com c√≥digo para tratamento no componente
      const firebaseError = new Error(this.getFirebaseErrorMessage(error.code));
      (firebaseError as any).code = error.code;
      throw firebaseError;
    }
  }

  // Login com Google
  async signInWithGoogle(): Promise<FirebaseUser | null> {
    try {
      const provider = new GoogleAuthProvider();
      const result = await signInWithPopup(this.auth, provider);
      return result.user;
    } catch (error: any) {
      console.error('Erro no login Google:', error);
      throw new Error(this.getFirebaseErrorMessage(error.code));
    }
  }

  // Logout
  async signOut(): Promise<void> {
    try {
      await signOut(this.auth);
    } catch (error) {
      console.error('Erro no logout:', error);
      throw error;
    }
  }

  // Observador de estado de autentica√ß√£o
  onAuthStateChanged(callback: (user: FirebaseUser | null) => void) {
    return onAuthStateChanged(this.auth, callback);
  }

  // Usu√°rio atual
  getCurrentUser(): FirebaseUser | null {
    return this.auth.currentUser;
  }

  // Salvar dados do usu√°rio no Firestore
  async saveUserData(userData: any): Promise<void> {
    try {
      console.log('üî• Iniciando salvamento no Firestore...');
      console.log('Dados a serem salvos:', userData);

      const userRef = doc(this.firestore, 'users', userData.uid);
      await setDoc(userRef, userData);

      console.log('‚úÖ Dados do usu√°rio salvos com sucesso no Firestore!');
      console.log('Caminho do documento:', `users/${userData.uid}`);
    } catch (error: any) {
      console.group('‚ùå ERRO no Firestore - saveUserData:');
      console.error('C√≥digo do erro:', error.code);
      console.error('Mensagem:', error.message);
      console.error('Dados que tentou salvar:', userData);
      console.error('Erro completo:', error);
      console.groupEnd();

      // Adicionar contexto ao erro
      const firestoreError = new Error(`Erro ao salvar no banco de dados: ${error.message}`);
      (firestoreError as any).code = error.code;
      (firestoreError as any).originalError = error;
      throw firestoreError;
    }
  }

  // M√©todo p√∫blico para acessar mensagens de erro
  getErrorMessage(errorCode: string): string {
    return this.getFirebaseErrorMessage(errorCode);
  }

  // Tradu√ß√£o de mensagens de erro
  private getFirebaseErrorMessage(errorCode: string): string {
    switch (errorCode) {
      // Erros de Authentication
      case 'auth/user-not-found':
        return '‚ùå Usu√°rio n√£o encontrado. Verifique o email ou registre-se.';
      case 'auth/wrong-password':
        return '‚ùå Senha incorreta. Tente novamente.';
      case 'auth/email-already-in-use':
        return '‚ùå Este email j√° est√° em uso. Tente fazer login ou use outro email.';
      case 'auth/weak-password':
        return '‚ùå A senha deve ter pelo menos 6 caracteres.';
      case 'auth/invalid-email':
        return '‚ùå Email inv√°lido. Verifique se digitou corretamente.';
      case 'auth/user-disabled':
        return '‚ùå Esta conta foi desabilitada. Entre em contato com o suporte.';
      case 'auth/too-many-requests':
        return '‚ùå Muitas tentativas. Aguarde alguns minutos e tente novamente.';
      case 'auth/network-request-failed':
        return '‚ùå Erro de conex√£o. Verifique sua internet e tente novamente.';
      case 'auth/invalid-credential':
        return '‚ùå Email ou senha inv√°lidos.';
      case 'auth/operation-not-allowed':
        return '‚ùå Opera√ß√£o n√£o permitida. Entre em contato com o suporte.';
      case 'auth/requires-recent-login':
        return '‚ùå Por seguran√ßa, fa√ßa login novamente.';

      // Erros do Firestore
      case 'permission-denied':
        return '‚ùå Permiss√£o negada. Verifique suas credenciais.';
      case 'unavailable':
        return '‚ùå Servi√ßo temporariamente indispon√≠vel. Tente novamente em alguns minutos.';
      case 'already-exists':
        return '‚ùå Dados j√° existem. Use informa√ß√µes diferentes.';
      case 'resource-exhausted':
        return '‚ùå Limite de uso excedido. Tente novamente mais tarde.';
      case 'failed-precondition':
        return '‚ùå Erro na configura√ß√£o do sistema. Entre em contato com o suporte.';
      case 'aborted':
        return '‚ùå Opera√ß√£o interrompida. Tente novamente.';
      case 'out-of-range':
        return '‚ùå Dados fora do limite permitido.';
      case 'unimplemented':
        return '‚ùå Funcionalidade n√£o implementada.';
      case 'internal':
        return '‚ùå Erro interno do servidor. Tente novamente em alguns minutos.';
      case 'data-loss':
        return '‚ùå Perda de dados detectada. Entre em contato com o suporte imediatamente.';
      case 'unauthenticated':
        return '‚ùå N√£o autenticado. Fa√ßa login novamente.';

      // Erro gen√©rico
      default:
        console.warn(`‚ö†Ô∏è  C√≥digo de erro n√£o mapeado: ${errorCode}`);
        return `‚ùå Erro t√©cnico (${errorCode}). Se o problema persistir, entre em contato com o suporte.`;
    }
  }

  // Retorna a inst√¢ncia do Firestore para uso externo
  getFirestore() {
    return this.firestore;
  }
}
