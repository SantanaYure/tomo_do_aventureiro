import { Injectable } from '@angular/core';
import { initializeApp } from 'firebase/app';
import {
  getAuth,
  signInWithEmailAndPassword,
  createUserWithEmailAndPassword,
  signOut,
  onAuthStateChanged,
  User as FirebaseUser,
  GoogleAuthProvider,
  signInWithPopup,
} from 'firebase/auth';
import {
  getFirestore,
  doc,
  setDoc,
  collection,
  addDoc,
  getDocs,
  getDoc,
  query,
  where,
  updateDoc,
  deleteDoc,
} from 'firebase/firestore';
import { environment } from '../../environments/environment';

@Injectable({
  providedIn: 'root',
})
export class FirebaseService {
  private app;
  private auth;
  private firestore;

  constructor() {
    try {
      console.log('üî• Inicializando Firebase...');
      console.log('Configura√ß√£o do Firebase:', environment.firebaseConfig);

      this.app = initializeApp(environment.firebaseConfig);
      this.auth = getAuth(this.app);
      this.firestore = getFirestore(this.app);

      console.log('‚úÖ Firebase inicializado com sucesso!');
      console.log('Auth:', this.auth);
      console.log('Firestore:', this.firestore);
    } catch (error) {
      console.group('‚ùå ERRO CR√çTICO na inicializa√ß√£o do Firebase:');
      console.error('Erro:', error);
      console.error('Configura√ß√£o:', environment.firebaseConfig);
      console.groupEnd();
      throw error;
    }
  }

  // Login com email e senha
  async signInWithEmail(email: string, password: string): Promise<FirebaseUser | null> {
    try {
      const userCredential = await signInWithEmailAndPassword(this.auth, email, password);
      return userCredential.user;
    } catch (error: any) {
      console.error('Erro no login Firebase:', error);
      throw new Error(this.getFirebaseErrorMessage(error.code));
    }
  }

  // Registro com email e senha
  async createUserWithEmail(email: string, password: string): Promise<FirebaseUser | null> {
    try {
      console.log('üî• Iniciando cria√ß√£o de usu√°rio no Firebase Auth...');
      const userCredential = await createUserWithEmailAndPassword(this.auth, email, password);
      console.log('‚úÖ Usu√°rio criado com sucesso no Firebase Auth:', userCredential.user.uid);
      return userCredential.user;
    } catch (error: any) {
      console.group('‚ùå ERRO no Firebase Auth - createUserWithEmail:');
      console.error('C√≥digo do erro:', error.code);
      console.error('Mensagem:', error.message);
      console.error('Email usado:', email);
      console.error('Erro completo:', error);
      console.groupEnd();

      // Relan√ßar erro com c√≥digo para tratamento no componente
      const firebaseError = new Error(this.getFirebaseErrorMessage(error.code));
      (firebaseError as any).code = error.code;
      throw firebaseError;
    }
  }

  // Login com Google
  async signInWithGoogle(): Promise<FirebaseUser | null> {
    try {
      const provider = new GoogleAuthProvider();
      const result = await signInWithPopup(this.auth, provider);
      return result.user;
    } catch (error: any) {
      console.error('Erro no login Google:', error);
      throw new Error(this.getFirebaseErrorMessage(error.code));
    }
  }

  // Logout
  async signOut(): Promise<void> {
    try {
      await signOut(this.auth);
    } catch (error) {
      console.error('Erro no logout:', error);
      throw error;
    }
  }

  // Observador de estado de autentica√ß√£o
  onAuthStateChanged(callback: (user: FirebaseUser | null) => void) {
    return onAuthStateChanged(this.auth, callback);
  }

  // Usu√°rio atual
  getCurrentUser(): FirebaseUser | null {
    return this.auth.currentUser;
  }

  // Salvar dados do usu√°rio no Firestore
  async saveUserData(userData: any): Promise<void> {
    try {
      console.log('üî• Iniciando salvamento no Firestore...');
      console.log('Dados a serem salvos:', userData);

      const userRef = doc(this.firestore, 'users', userData.uid);
      await setDoc(userRef, userData);

      console.log('‚úÖ Dados do usu√°rio salvos com sucesso no Firestore!');
      console.log('Caminho do documento:', `users/${userData.uid}`);
    } catch (error: any) {
      console.group('‚ùå ERRO no Firestore - saveUserData:');
      console.error('C√≥digo do erro:', error.code);
      console.error('Mensagem:', error.message);
      console.error('Dados que tentou salvar:', userData);
      console.error('Erro completo:', error);
      console.groupEnd();

      // Adicionar contexto ao erro
      const firestoreError = new Error(`Erro ao salvar no banco de dados: ${error.message}`);
      (firestoreError as any).code = error.code;
      (firestoreError as any).originalError = error;
      throw firestoreError;
    }
  }

  // M√©todo p√∫blico para acessar mensagens de erro
  getErrorMessage(errorCode: string): string {
    return this.getFirebaseErrorMessage(errorCode);
  }

  // Tradu√ß√£o de mensagens de erro
  private getFirebaseErrorMessage(errorCode: string): string {
    switch (errorCode) {
      // Erros de Authentication
      case 'auth/user-not-found':
        return '‚ùå Usu√°rio n√£o encontrado. Verifique o email ou registre-se.';
      case 'auth/wrong-password':
        return '‚ùå Senha incorreta. Tente novamente.';
      case 'auth/email-already-in-use':
        return '‚ùå Este email j√° est√° em uso. Tente fazer login ou use outro email.';
      case 'auth/weak-password':
        return '‚ùå A senha deve ter pelo menos 6 caracteres.';
      case 'auth/invalid-email':
        return '‚ùå Email inv√°lido. Verifique se digitou corretamente.';
      case 'auth/user-disabled':
        return '‚ùå Esta conta foi desabilitada. Entre em contato com o suporte.';
      case 'auth/too-many-requests':
        return '‚ùå Muitas tentativas. Aguarde alguns minutos e tente novamente.';
      case 'auth/network-request-failed':
        return '‚ùå Erro de conex√£o. Verifique sua internet e tente novamente.';
      case 'auth/invalid-credential':
        return '‚ùå Email ou senha inv√°lidos.';
      case 'auth/operation-not-allowed':
        return '‚ùå Opera√ß√£o n√£o permitida. Entre em contato com o suporte.';
      case 'auth/requires-recent-login':
        return '‚ùå Por seguran√ßa, fa√ßa login novamente.';

      // Erros do Firestore
      case 'permission-denied':
        return '‚ùå Permiss√£o negada. Verifique suas credenciais.';
      case 'unavailable':
        return '‚ùå Servi√ßo temporariamente indispon√≠vel. Tente novamente em alguns minutos.';
      case 'already-exists':
        return '‚ùå Dados j√° existem. Use informa√ß√µes diferentes.';
      case 'resource-exhausted':
        return '‚ùå Limite de uso excedido. Tente novamente mais tarde.';
      case 'failed-precondition':
        return '‚ùå Erro na configura√ß√£o do sistema. Entre em contato com o suporte.';
      case 'aborted':
        return '‚ùå Opera√ß√£o interrompida. Tente novamente.';
      case 'out-of-range':
        return '‚ùå Dados fora do limite permitido.';
      case 'unimplemented':
        return '‚ùå Funcionalidade n√£o implementada.';
      case 'internal':
        return '‚ùå Erro interno do servidor. Tente novamente em alguns minutos.';
      case 'data-loss':
        return '‚ùå Perda de dados detectada. Entre em contato com o suporte imediatamente.';
      case 'unauthenticated':
        return '‚ùå N√£o autenticado. Fa√ßa login novamente.';
      case 'invalid-argument':
        return '‚ùå Dados inv√°lidos enviados ao servidor. Verifique os campos preenchidos.';
      case 'not-found':
        return '‚ùå Recurso n√£o encontrado.';
      case 'cancelled':
        return '‚ùå Opera√ß√£o cancelada.';
      case 'deadline-exceeded':
        return '‚ùå Tempo limite excedido. Tente novamente.';

      // Erro gen√©rico
      default:
        console.warn(`‚ö†Ô∏è  C√≥digo de erro n√£o mapeado: ${errorCode}`);
        return `‚ùå Erro t√©cnico (${errorCode}). Se o problema persistir, entre em contato com o suporte.`;
    }
  }

  // Retorna a inst√¢ncia do Firestore para uso externo
  getFirestore() {
    return this.firestore;
  }

  // ========================================
  // M√âTODOS PARA TEMPLATES (READ)
  // ========================================

  /**
   * Busca a lista de todos os templates de ficha dispon√≠veis.
   * @returns Uma Promise com os documentos dos templates.
   */
  async getTemplates() {
    try {
      const templatesCollection = collection(this.firestore, 'templates');
      const snapshot = await getDocs(templatesCollection);

      console.log(`‚úÖ ${snapshot.size} template(s) encontrado(s)`);
      return snapshot;
    } catch (error: any) {
      console.error('‚ùå Erro ao buscar templates:', error);
      throw new Error(this.getFirebaseErrorMessage(error.code || 'internal'));
    }
  }

  /**
   * Busca a estrutura detalhada de um template espec√≠fico pelo seu ID.
   * @param id O ID do documento do template.
   * @returns Uma Promise com o documento do template.
   */
  async getTemplateById(id: string) {
    try {
      const templateDoc = doc(this.firestore, 'templates', id);
      const snapshot = await getDoc(templateDoc);

      if (snapshot.exists()) {
        console.log(`‚úÖ Template '${id}' encontrado`);
        return snapshot;
      } else {
        console.warn(`‚ö†Ô∏è  Template '${id}' n√£o encontrado`);
        throw new Error('Template n√£o encontrado');
      }
    } catch (error: any) {
      console.error(`‚ùå Erro ao buscar template '${id}':`, error);
      throw new Error(this.getFirebaseErrorMessage(error.code || 'internal'));
    }
  }

  // ========================================
  // M√âTODOS PARA FICHAS DE PERSONAGEM (CRUD)
  // ========================================

  /**
   * Cria uma nova ficha de personagem no Firestore.
   * @param sheetData Os dados iniciais da ficha (ex: nome, templateId, campos).
   * @returns Uma Promise com a refer√™ncia do novo documento criado.
   */
  async addCharacterSheet(sheetData: any) {
    try {
      const user = this.getCurrentUser();
      if (!user) {
        throw new Error('Usu√°rio n√£o autenticado.');
      }

      // Valida√ß√µes b√°sicas
      if (!sheetData.nome || typeof sheetData.nome !== 'string') {
        throw new Error('Nome do personagem √© obrigat√≥rio e deve ser texto.');
      }

      if (!sheetData.templateId || typeof sheetData.templateId !== 'string') {
        throw new Error('Template ID √© obrigat√≥rio.');
      }

      const sheetCollection = collection(this.firestore, 'personagens');

      // Adiciona o ID do dono (ownerId) para seguran√ßa e refer√™ncia
      const dataToSave = {
        templateId: sheetData.templateId,
        templateNome: sheetData.templateNome || '',
        nome: sheetData.nome.trim(),
        campos: sheetData.campos || {},
        ownerId: user.uid,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
      };

      console.log('üî• Criando ficha de personagem:', dataToSave);
      const docRef = await addDoc(sheetCollection, dataToSave);
      console.log(`‚úÖ Ficha criada com sucesso! ID: ${docRef.id}`);

      return docRef;
    } catch (error: any) {
      console.error('‚ùå Erro ao criar ficha:', error);
      console.error('Dados enviados:', sheetData);
      throw new Error(this.getFirebaseErrorMessage(error.code || 'internal'));
    }
  }

  /**
   * Busca todas as fichas de personagem do usu√°rio atualmente logado.
   * @returns Uma Promise com os documentos das fichas do usu√°rio.
   */
  async getUserCharacterSheets() {
    try {
      const user = this.getCurrentUser();
      if (!user) {
        throw new Error('Usu√°rio n√£o autenticado.');
      }

      const sheetCollection = collection(this.firestore, 'personagens');
      // Cria uma query que filtra os documentos pelo ownerId
      const q = query(sheetCollection, where('ownerId', '==', user.uid));

      console.log(`üîç Buscando fichas do usu√°rio: ${user.uid}`);
      const snapshot = await getDocs(q);
      console.log(`‚úÖ ${snapshot.size} ficha(s) encontrada(s)`);

      return snapshot;
    } catch (error: any) {
      console.error('‚ùå Erro ao buscar fichas do usu√°rio:', error);
      throw new Error(this.getFirebaseErrorMessage(error.code || 'internal'));
    }
  }

  /**
   * Busca os dados completos de uma ficha de personagem espec√≠fica pelo seu ID.
   * @param sheetId O ID do documento da ficha.
   * @returns Uma Promise com o documento da ficha.
   */
  async getCharacterSheetById(sheetId: string) {
    try {
      const sheetDoc = doc(this.firestore, 'personagens', sheetId);
      const snapshot = await getDoc(sheetDoc);

      if (snapshot.exists()) {
        console.log(`‚úÖ Ficha '${sheetId}' encontrada`);

        // Verificar se o usu√°rio atual √© o dono da ficha
        const user = this.getCurrentUser();
        const sheetData = snapshot.data();

        if (user && sheetData['ownerId'] !== user.uid) {
          console.warn(`‚ö†Ô∏è  Usu√°rio n√£o autorizado a acessar ficha '${sheetId}'`);
          throw new Error('Voc√™ n√£o tem permiss√£o para acessar esta ficha.');
        }

        return snapshot;
      } else {
        console.warn(`‚ö†Ô∏è  Ficha '${sheetId}' n√£o encontrada`);
        throw new Error('Ficha n√£o encontrada');
      }
    } catch (error: any) {
      console.error(`‚ùå Erro ao buscar ficha '${sheetId}':`, error);
      throw new Error(error.message || this.getFirebaseErrorMessage(error.code || 'internal'));
    }
  }

  /**
   * Atualiza os dados de uma ficha de personagem existente.
   * @param sheetId O ID do documento da ficha a ser atualizada.
   * @param dataToUpdate Um objeto com os campos a serem atualizados.
   * @returns Uma Promise que resolve quando a atualiza√ß√£o √© conclu√≠da.
   */
  async updateCharacterSheet(sheetId: string, dataToUpdate: any) {
    try {
      const user = this.getCurrentUser();
      if (!user) {
        throw new Error('Usu√°rio n√£o autenticado.');
      }

      // Verificar se o usu√°rio √© o dono da ficha antes de atualizar
      const sheetDoc = doc(this.firestore, 'personagens', sheetId);
      const snapshot = await getDoc(sheetDoc);

      if (!snapshot.exists()) {
        throw new Error('Ficha n√£o encontrada');
      }

      const sheetData = snapshot.data();
      if (sheetData['ownerId'] !== user.uid) {
        throw new Error('Voc√™ n√£o tem permiss√£o para editar esta ficha.');
      }

      // Adiciona timestamp de atualiza√ß√£o
      const updateData = {
        ...dataToUpdate,
        updatedAt: new Date().toISOString(),
      };

      console.log(`üîÑ Atualizando ficha '${sheetId}'`);
      await updateDoc(sheetDoc, updateData);
      console.log(`‚úÖ Ficha '${sheetId}' atualizada com sucesso`);
    } catch (error: any) {
      console.error(`‚ùå Erro ao atualizar ficha '${sheetId}':`, error);
      throw new Error(error.message || this.getFirebaseErrorMessage(error.code || 'internal'));
    }
  }

  /**
   * Deleta uma ficha de personagem.
   * @param sheetId O ID do documento da ficha a ser deletada.
   * @returns Uma Promise que resolve quando a dele√ß√£o √© conclu√≠da.
   */
  async deleteCharacterSheet(sheetId: string) {
    try {
      const user = this.getCurrentUser();
      if (!user) {
        throw new Error('Usu√°rio n√£o autenticado.');
      }

      // Verificar se o usu√°rio √© o dono da ficha antes de deletar
      const sheetDoc = doc(this.firestore, 'personagens', sheetId);
      const snapshot = await getDoc(sheetDoc);

      if (!snapshot.exists()) {
        throw new Error('Ficha n√£o encontrada');
      }

      const sheetData = snapshot.data();
      if (sheetData['ownerId'] !== user.uid) {
        throw new Error('Voc√™ n√£o tem permiss√£o para deletar esta ficha.');
      }

      console.log(`üóëÔ∏è  Deletando ficha '${sheetId}'`);
      await deleteDoc(sheetDoc);
      console.log(`‚úÖ Ficha '${sheetId}' deletada com sucesso`);
    } catch (error: any) {
      console.error(`‚ùå Erro ao deletar ficha '${sheetId}':`, error);
      throw new Error(error.message || this.getFirebaseErrorMessage(error.code || 'internal'));
    }
  }
}
